version: '3.8'

services:
  # Backend Laravel
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: relatorio_api_prod
    restart: always
    working_dir: /var/www
    volumes:
      - ./backend:/var/www
      - ./backend/storage/app/public:/var/www/storage/app/public
    networks:
      - relatorio_network
    depends_on:
      - db
      - redis
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=relatorio_db
      - DB_USERNAME=relatorio_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  # Frontend React (Build para produção)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: relatorio_frontend_prod
    restart: always
    volumes:
      - frontend_build:/app/build
    networks:
      - relatorio_network

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: relatorio_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend:/var/www
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/sites/prod.conf:/etc/nginx/sites-available/default
      - ./nginx/sites/prod.conf:/etc/nginx/sites-enabled/default
      - frontend_build:/var/www/frontend
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
      - frontend
    networks:
      - relatorio_network

  # MySQL Database
  db:
    image: mysql:8.0
    container_name: relatorio_db_prod
    restart: always
    environment:
      MYSQL_DATABASE: relatorio_db
      MYSQL_USER: relatorio_user
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - mysql_data_prod:/var/lib/mysql
    networks:
      - relatorio_network

  # Redis
  redis:
    image: redis:alpine
    container_name: relatorio_redis_prod
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - relatorio_network

  # Certbot para SSL
  certbot:
    image: certbot/certbot:latest
    container_name: relatorio_certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./ssl/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}

volumes:
  mysql_data_prod:
  frontend_build:

networks:
  relatorio_network:
    driver: bridge 